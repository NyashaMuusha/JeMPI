version: '3.8'

networks:
  backend:
    name: backend
    driver: overlay
    attachable: true
  frontend:
    name: frontend
    driver: overlay
    attachable: true

services:

  postgresql:
    image: skunkworks2:5000/v2/bitnami/postgresql:15.4.0
    networks:
    - backend
    ports:
    - published: 5432
      target: 5432
      protocol: tcp
      mode: host
    volumes:
    - type: bind
      source: /mnt/c/Users/skunkworks/Projects/jempi/JeMPI/devops/windows/base-docker-wsl/docker_data/data/postgres
      target: /conf
      read_only: true
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: notifications
      ALLOW_EMPTY_PASSWORD: "no"
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: 8G
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 0
      placement:
        constraints:
        - node.labels.name == skunkworks2

  # keycloak-test-server:
  #   image: skunkworks2:5000/v2/bitnami/keycloak:21.1.2
  #   user: root
  #   networks:
  #     - frontend
  #     - backend
  #   volumes:
  #   - type: bind
  #     source: /mnt/c/Users/skunkworks/Projects/jempi/JeMPI/devops/windows/base-docker-wsl/docker_data/data/data-keycloak-test-server
  #     target: /docker-entrypoint-initdb.d
  #     read_only: true
  #   environment:
  #     KEYCLOAK_CREATE_ADMIN_USER: "true"
  #     KEYCLOAK_ADMIN_USER: "admin"
  #     KEYCLOAK_ADMIN_PASSWORD: "admin"
  #     DB_ADDR: postgresql
  #     DB_PORT: 5432
  #     DB_DATABASE: notifications
  #     DB_USER: postgres
  #     DB_PASSWORD: postgres
  #   deploy:
  #     mode: replicated
  #     replicas: 0
  #     resources:
  #       limits:
  #         memory: 8G
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints:
  #         - node.labels.name == skunkworks2

  # nginx:
  #   image: skunkworks2:5000/v2/
  #   networks:
  #     - frontend
  #   deploy:
  #     mode: replicated
  #     replicas: 0
  #     resources:
  #       limits:
  #         memory: 8G
  #     update_config:
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #     placement:
  #       constraints:
  #         - node.labels.name == skunkworks2

#  haproxy:
#    image: skunkworks2:5000/v2/haproxytech/haproxy-debian:2.8
#    dns:
#      - 127.0.0.11
#    networks:
#      - frontend
#      - backend
#    ports:
#      - published: 30460
#        target: 30460
#        protocol: tcp
#        mode: host
#      - published: 50000
#        target: 50000
#        protocol: tcp
#        mode: host
#      - published: 3000
#        target: 3000
#        protocol: tcp
#        mode: host
#    volumes:
#      - type: bind
#        source: /mnt/c/Users/skunkworks/Projects/jempi/JeMPI/devops/windows/base-docker-wsl/data-haproxy
#        target: /etc/haproxy/
#        read_only: true
#    deploy:
#      mode: global
#      resources:
#        limits:
#          memory: 8G
      
  kafka-01:
    image: skunkworks2:5000/v2/bitnami/kafka:3.5
    user: root
    networks:
      - backend
    ports:
    - published: 9094
      target: 9094
      protocol: tcp
      mode: host      
    environment:
      BITNAMI_DEBUG: 'true'
    # KRaft settings
      KAFKA_KRAFT_CLUSTER_ID: 'ehB92ChxEe2iYQAAAkKsEg'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-01:9093
    # Listeners
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka-01:9092,EXTERNAL://172.17.173.159:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_BROKER_ID: 1
    volumes:
      - type: bind
        source: /mnt/c/Users/skunkworks/Projects/jempi/JeMPI/devops/windows/base-docker-wsl/docker_data/data/kafka-01
        target: /bitnami/kafka
        read_only: false
    deploy:
      mode: replicated
      replicas: 0
      resources:
        limits:
          memory: 8G
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.name == skunkworks2
  
  zero-01:
    image: skunkworks2:5000/v2/dgraph/dgraph:v23.1.0
    hostname: "zero-01"
    networks:
    - backend
    ports:
    - published: 5080
      target: 5080
      protocol: tcp
      mode: host
    - published: 6080
      target: 6080
      protocol: tcp
      mode: host
    volumes:
    - type: bind
      source: /mnt/c/Users/skunkworks/Projects/jempi/JeMPI/devops/windows/base-docker-wsl/docker_data/data/dgraph/zero-01
      target: /dgraph
    deploy:
      replicas: 0
      resources:
        limits:
          memory: 16G
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == skunkworks2
    command: dgraph zero --my=zero-01:5080 --replicas 1 --telemetry "reports=false; sentry=false;"

  alpha-01:
    image: skunkworks2:5000/v2/dgraph/dgraph:v23.1.0
    hostname: "alpha-01"
    networks:
    - backend
    volumes:
    - type: bind
      source: /mnt/c/Users/skunkworks/Projects/jempi/JeMPI/devops/windows/base-docker-wsl/docker_data/data/dgraph/alpha-01
      target: /dgraph
    ports:
    - published: 8081
      target: 8080
      protocol: tcp
      mode: host
    - published: 9080
      target: 9080
      protocol: tcp
      mode: host
    deploy:
      replicas: 0
      resources:
        limits:
          memory: 16G
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == skunkworks2
    command: dgraph alpha --my=alpha-01:7080 --zero=zero-01:5080 --security whitelist=0.0.0.0/0 --telemetry "reports=false; sentry=false;"

  ratel:
    image: skunkworks2:5000/v2/dgraph/ratel:v21.03.2
    ports:
    - published: 8010
      target: 8000
      protocol: tcp
      mode: host                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
    networks:
    - backend
    deploy:
      replicas: 0
      resources:
        limits:
          memory: 16G
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.labels.name == skunkworks2
    command: dgraph-ratel
